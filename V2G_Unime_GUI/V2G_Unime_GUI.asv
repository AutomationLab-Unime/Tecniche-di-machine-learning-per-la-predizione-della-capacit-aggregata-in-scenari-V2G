function V2G_Unime_GUI()

    % Get screen size
    screenSize = get(0, 'ScreenSize')*0.9;
    headingHeight = 100;
    panelWidth = 400;

    % Create main UI figure
    fig = uifigure('Name', 'V2G Modeling Framework', ...
                   'Position', screenSize-10);

    %% 1. Heading Section (Top Banner)
    headingPanel = uipanel(fig, ...
        'Position', [0, screenSize(4)-headingHeight, screenSize(3), headingHeight], ...
        'BackgroundColor', [0.95 0.95 0.95], ...
        'BorderType', 'none');

    % Left Logo
    uiimage(headingPanel, ...
        'ImageSource', 'logos\Unime_DI.png', ...
        'Position', [0, 0, 160, 120]);

    % Title
    uilabel(headingPanel, ...
        'Text', 'V2G Modeling Framework', ...
        'FontSize', 24, ...
        'FontWeight', 'bold', ...
        'HorizontalAlignment', 'center', ...
        'Position', [screenSize(3)/2 - 150, 30, 300, 40]);

    % Right Logo
    uiimage(headingPanel, ...
        'ImageSource', 'logos\Project_Funding_Logo.jpg', ...
        'Position', [screenSize(3)-160, 0, 160, 120]);

    %% 2. Command Panel (Left)
    panelCommand = uipanel(fig, ...
        'Title', 'Command Panel', ...
        'FontWeight', 'bold', ...
        'FontSize', 16, ...
        'Position', [10, 10, panelWidth, screenSize(4)-headingHeight-20]);

    % Internal Panel Heights
    internalPanelHeight = 150;
    padding = 40;

    % Data Panel
    panelData = uipanel(panelCommand, ...
        'Title', 'Data', ...
        'FontWeight', 'bold', ...
        'FontSize', 14, ...
        'BackgroundColor', [0.9 0.95 1], ...
        'Position', [10, panelCommand.Position(4)-internalPanelHeight-padding, ...
                     panelWidth-20, internalPanelHeight]);



    uibutton(panelData, ...
        'Text', 'Load Raw Vehicle Data', ...
        'FontWeight', 'bold', ...
        'FontSize', 13, ...
        'Position', [20, internalPanelHeight-60, 200, 30], ...
        'ButtonPushedFcn', @(btn, event) onLoadData_RawVehicle(fig));
    uibutton(panelData, ...
        'Text', 'Load Raw Exogenous Data', ...
        'FontWeight', 'bold', ...
        'FontSize', 13, ...
        'Position', [20, internalPanelHeight-100, 200, 30], ...
        'ButtonPushedFcn', @(btn, event) onLoadData_RawExogenous(fig));

        % --- Button to visualize stop maps ---
    uibutton(panelData, ...
        'Text', 'Visualize Stop Maps', ...
        'FontWeight', 'bold', ...
        'FontSize', 13, ...
        'Position', [20, internalPanelHeight-140, 200, 30], ...
        'ButtonPushedFcn', @(btn, event) onVisualizeStopMaps(fig));


%--- Gruppo di pulsanti per scelta basemap (satellite/street) ---
bg = uibuttongroup(panelData, ...
    'Title', 'Basemap Selection', ...
    'Units', 'pixels', ...
    'Position', [20, internalPanelHeight-100, 200, 30], ... % posizione vicino al bottone
    'SelectionChangedFcn', @(src,event) updateBasemap(fig, event));

uicontrol(bg, ...
    'Style', 'radiobutton', ...
    'String', 'Satellite', ...
    'Units', 'pixels', ...
    'Position', [10, internalPanelHeight-90, 200, 30]);

uicontrol(bg, ...
    'Style', 'radiobutton', ...
    'String', 'Street', ...
    'Units', 'pixels', ...
    'Position', [10 10 100 20]);

%--- Impostazione predefinita ---
bg.SelectedObject = bg.Children(2);  % Street come default
fig.UserData.Basemap = 'street';

    function updateBasemap(fig, event)
    selected = event.NewValue.String;
    fig.UserData.Basemap = lower(selected);  % 'satellite' oppure 'street'
    disp(['Basemap selezionata: ' fig.UserData.Basemap]);
end

    % Pre-processing Panel
    panelPreprocess = uipanel(panelCommand, ...
        'Title', 'Pre-processing', ...
        'FontWeight', 'bold', ...
        'FontSize', 14, ...
        'BackgroundColor', [0.95 0.95 0.8], ...
        'Position', [10, panelCommand.Position(4)-2*(internalPanelHeight+padding-10), ...
                     panelWidth-20, internalPanelHeight]);

   uibutton(panelPreprocess, ...
        'Text', 'Data Exploration', ...
        'FontWeight', 'bold', ...
        'FontSize', 13, ...
        'Position', [20, internalPanelHeight-60, 200, 30], ...
        'ButtonPushedFcn', @(btn, event) onLoadData_DataExploration(fig));
   % --- Checkbox for saving processed data ---
    cbSave = uicheckbox(panelPreprocess, ...
        'Text', 'Save Processed Data', ...
        'FontSize', 13, ...
        'Position', [20, internalPanelHeight-100, 200, 30], ...
        'ValueChangedFcn', @(cb, event) onSaveCheckboxChanged(cb, fig));


    % Modeling and Prediction Panel
    panelModel = uipanel(panelCommand, ...
        'Title', 'Prediction and Interpretation', ...
        'FontWeight', 'bold', ...
        'FontSize', 14, ...
        'BackgroundColor', [0.9 1 0.9], ...
        'Position', [10, panelCommand.Position(4)-3*(internalPanelHeight+padding-10), ...
                     panelWidth-20, internalPanelHeight]);

   uibutton(panelModel, ...
        'Text', 'Load Model Input', ...
        'FontWeight', 'bold', ...
        'FontSize', 13, ...
        'Position', [20, internalPanelHeight-60, 200, 30], ...
        'ButtonPushedFcn', @(btn, event) onLoadData_ModelInput(fig));

    % Regression Button
    uibutton(panelModel, ...
        'Text', 'Regression Tool', ...
        'FontWeight', 'bold', ...
        'FontSize', 13, ...
        'Position', [20, internalPanelHeight-100, 200, 30], ...
        'ButtonPushedFcn', @(btn, event) onRegressionLearnerePlot());

    % Close Button
    uibutton(panelCommand, ...
        'Text', 'Close', ...
        'Position', [90, 10, 120, 30], ...
        'ButtonPushedFcn', @(btn, event) close(fig));

    %% 3. Display Panel (Right Side)
    panelDisplay = uipanel(fig, ...
        'Title', 'Figure Display Panel', ...
        'FontWeight', 'bold', ...
        'Position', [panelWidth + 20, 10, ...
                     screenSize(3) - panelWidth - 30, ...
                     screenSize(4) - headingHeight - 20]);

            % Axes Preview
        % Tab Group in Display Panel
        % Margini
        top_margin = 30;     % spazio per i tab
        bottom_margin = 50;  % spazio per xlabel o altro contenuto in basso
        side_margin = 20;
        
        % Calcolo posizione tabGroup dentro panelDisplay
        tabGroup = uitabgroup(panelDisplay, ...
            'Units', 'pixels', ...
            'Position', [side_margin, ...
                         bottom_margin, ...
                         panelDisplay.Position(3) - 2*side_margin, ...
                         panelDisplay.Position(4) - top_margin - bottom_margin], ...
            'Tag', 'tabGroup');
        
        % Margini
        right_margin = 20;
        bottom_margin = 10;
        button_width = 120;
        button_height = 30;
        
        % Posizione del pulsante in basso a destra nel panelDisplay
        uibutton(panelDisplay, ...
            'Text', 'Close Tabs', ...
            'FontWeight', 'bold', ...
            'FontSize', 13, ...
            'Position', [panelDisplay.Position(3) - button_width - right_margin, ...
                         bottom_margin, ...
                         button_width, ...
                         button_height], ...
            'ButtonPushedFcn', @(btn, event) closeAllTabs(fig));


%% Callback: Load Data
function onLoadData_RawVehicle(fig)
    [file, path] = uigetfile('*.mat', 'Select MAT File');
    if isequal(file, 0)
        uialert(fig, 'No file selected', 'Load Cancelled');
    else
        fullPath = fullfile(path, file);
        disp(['‚úÖ Loaded: ', fullPath]);
        fig.UserData.rowdata_filepath=fullPath;
        [pathstr,name,ext] = fileparts(fullPath)
        fileNameParts=split(name,'_');
        fig.UserData.ZoneName=string(fileNameParts(1));
        disp(fieldnames(fig.UserData));
    end
end

    % --- Callback for checkbox ---
    function onSaveCheckboxChanged(cb, fig)
        fig.UserData.save_file = cb.Value;
        disp(['Save Processed Data set to: ', mat2str(cb.Value)]);
        end
    
    % --- Callback for stop maps visualization ---
    function onVisualizeStopMaps(fig)
        if isfield(fig.UserData, 'rowdata_filepath')
        disp('üìç Visualizing stop maps...');
        visualize_stop_maps(fig); % <-- Replace with your real function
        else
        uialert(fig, 'Please load Raw Vehicle Data first.', 'Missing Data');
        end
        end


function onLoadData_RawExogenous(fig)
    [file, path] = uigetfile('*.mat', 'Select MAT File');
    if isequal(file, 0)
        uialert(fig, 'No file selected', 'Load Cancelled');
    else
        fullPath = fullfile(path, file);
        disp(['‚úÖ Loaded: ', fullPath]);
        fig.UserData.meteo_data_filepath=fullPath;
        disp(fieldnames(fig.UserData));

    end
    %load('Zone214_Trieste_24_24_0.mat')
    % fig.UserData.train_norm=fig.UserData.Regressors_norm_trainval;
    % fig.UserData.test_norm=fig.UserData.Regressors_norm_test;
end

%%

function onLoadData_DataExploration(fig)

    Generate_AAC_meteo_calendar_fnc(pwd,fig.UserData.rowdata_filepath,fig.UserData.meteo_data_filepath, fig.UserData.save_file,1,fig)

end

function closeAllTabs(fig)
    tabGroup = findobj(fig, 'Type', 'uitabgroup', 'Tag', 'tabGroup');
    if isempty(tabGroup)
        uialert(fig, 'Nessun tabgroup trovato.', 'Errore');
        return;
    end

    tabs = tabGroup.Children;  % Children restituisce tutti i tab (uitab)
    for i = 1:numel(tabs)
        delete(tabs(i));
    end
end
    function onLoadData_ModelInput(fig)
    [file, path] = uigetfile('*.mat', 'Select MAT File');
    if isequal(file, 0)
        uialert(fig, 'No file selected', 'Load Cancelled');
    else
        fullPath = fullfile(path, file);
        fig.UserData.regressors = load(fullPath);
        disp(['‚úÖ Loaded: ', fullPath]);
        disp(fieldnames(fig.UserData));
    end
    %load('Zone214_Trieste_24_24_0.mat')
    % fig.UserData.train_norm=fig.UserData.Regressors_norm_trainval;
    % fig.UserData.test_norm=fig.UserData.Regressors_norm_test;
end

% %% Callback: Undock Plot
% function onRegressionLearnerePlot()
%     f = figure('Name', 'Undocked Plot');
%     x = linspace(0, 2*pi, 1000);
%     plot(f.CurrentAxes, x, sin(x));
%     title('Undocked Plot'); xlabel('Time'); ylabel('Amplitude');
% end

%% Callback: Regression Learner
function onRegressionLearnerePlot()
     regressionLearner(fig.UserData.train_norm, 'AAC_1');
end
end